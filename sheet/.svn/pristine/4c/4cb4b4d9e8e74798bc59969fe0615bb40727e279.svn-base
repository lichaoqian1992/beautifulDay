package com.manji.sheet.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

import com.jfinal.json.JFinalJson;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.manji.sheet.controller.BuyerPcController;
import com.manji.sheet.model.bean.SheetInfo;
import com.manji.sheet.model.common.SheetResult;
import com.manji.sheet.model.enums.ResultEmuns;
import com.manji.sheet.model.reqParam.SheetInfoParam;
import com.manji.sheet.utils.DatesUtils;
import com.manji.sheet.utils.WorkerNumberUtil;

public class BuyerPcService {

	private static final Logger log = Logger.getLogger(BuyerPcService.class);
	
	/*
	 * 客服系统 -建议
	 * */
	/**
	 * 查询我的建议
	 * @param userId
	 * @param pageNum
	 * @param pageSize
	 * @return
	 */
	public Page<Record> mySuggest(String userId,String pageNum,String pageSize,String type){
		
		String sql = "from dt_sheets s inner join dt_sheet_type t on s.type_code like '05_%' and s.sponsor_id="+userId+" and s.sponsor_type=1 and s.type_code=t.code inner join dt_sheet_info i on s.id=i.sheet_id order by s.start_time desc"; 
		Page<Record> list = Db.paginate(Integer.parseInt(pageNum), Integer.parseInt(pageSize), "select s.*,t.title,t.short_title,t.merge_title,i.descr,i.pics", sql);
		
		return list;
		
	}
	/**
	 * 保存工单信息
	 * @param userId
	 * @param code
	 * @param descr
	 * @param pics
	 * @return
	 */
	public String saveSheet(String userId,String code,String descr,String pics,String type){
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String stu="",status = "";
		//存用户名称，根据用户id查询用户名称
		Record user = Db.findFirst("select * from dt_users where id=?",userId);
		String user_name = user.getStr("user_name");
		String mobile = user.getStr("mobile");
		String nickName = user.getStr("nick_name");
		//根据工单的类型确定工单的状态
		//举报商品：RGD,举报店铺：RSH,举报员工：RMJ,咨询：ADV,建议：FEB,交易纠纷：TRD,评价纠纷：EVD
		if(type.equals("RMJ") || type.equals("FEB")){
			status = "3";//处理中
		}else{
			status = "1";
		}
		/*工单主表*/
			Record sheet = new Record();
			sheet.set("sheet_no", WorkerNumberUtil.GeneratWorkerNumber(type));
			sheet.set("status",status);
			sheet.set("type_code",code);
			sheet.set("sponsor_id",userId);
			if(!type.equals("TRD")){
				sheet.set("sponsor",user_name);
			}else{
				sheet.set("sponsor",nickName);
			}
			
			sheet.set("sponsor_type","1");
			sheet.set("sponsor_contact",mobile);
			sheet.set("start_time",sdf.format(new Date()));
			sheet.set("source_code","01");//01表示用户PC
			sheet.set("priority_level","1");
			sheet.set("is_push","0");
			boolean s = Db.save("dt_sheets",sheet);
		
			if(s){
				SheetInfoParam sheetInfo = new SheetInfoParam();
				sheetInfo.setDescr(descr);
				sheetInfo.setPics(pics);
				sheetInfo.setSponsor_id(userId);
				sheetInfo.setReportTitle(type);
				sheetInfo.setReportType(code);
				stu = saveOther(sheet, sheetInfo, user_name);
				
			}
			return stu;
		
	}
	/**
	 * 保存从表的数据
	 * @return
	 */
	public String saveOther(Record sheet , SheetInfoParam sheetInfo , String user_name){
		
		String stu = "";
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		/*保存工单资料表*/
		Record sheetData = new Record();
		sheetData.set("sheet_id",sheet.get("id"));
		sheetData.set("descr",sheetInfo.getDescr());
		sheetData.set("pics",sheetInfo.getPics());
		sheetData.set("add_time",sdf1.format(new Date()));
		sheetData.set("submitter",user_name);
		sheetData.set("submitter_id",sheetInfo.getSponsor_id());
		sheetData.set("submitter_type","Buyer");
		Db.save("dt_sheet_info",sheetData);

	/*工单业务关系表*/
		Record sheetRelation = new Record();
		sheetRelation.set("sheet_id",sheet.get("id"));
		sheetRelation.set("order_id",sheetInfo.getOrderId());
		sheetRelation.set("back_order_id",sheetInfo.getBackOrderId());
		sheetRelation.set("shop_user_id",sheetInfo.getShopId());
		sheetRelation.set("shop_id",sheetInfo.getShopInfo());
		sheetRelation.set("article_id",sheetInfo.getArticleId());
		Db.save("dt_sheet_business",sheetRelation);
	/*工单详情表    只有是举报员工和建议的时候才保存这张表*/
		if(sheetInfo.getReportTitle().equals("RMJ") || sheetInfo.getReportTitle().equals("FEB")){
			String exe_dept = "计划部";
			String exe_dept_id = "1";
			if(sheetInfo.getReportTitle().equals("RMJ")){
				exe_dept = "监察部";
				exe_dept_id = "2";
			}
			Record details = new Record();
			details.set("sheet_id",sheet.get("id"));
			details.set("exe_dept",exe_dept);
			details.set("exe_dept_id",exe_dept_id);
			details.set("sup_dept","监察部");
			details.set("sup_dept_id","2");
			Db.save("dt_sheet_detail",details);
		}
	/*工单流程记录*/
		String descr = "";
		String[] code = sheetInfo.getReportType().split("_");
		if(code[0].equals("01") || code[0].equals("02") || code[0].equals("03")){
			descr = "客户提交举报单";
		}else if(code[0].equals("04")){
			descr = "客户提交咨询单";
		}else if(code[0].equals("05")){
			descr = "客户提交建议单";
		}else if(code[0].equals("06")){
			descr = "客户提交纠纷单";
		}
		Record flowLog = new Record();
		flowLog.set("sheet_id", sheet.get("id")).set("opr_time", sdf.format(new Date())).set("opr_type", 1).set("result", "待受理").set("descr", descr);
		Db.save("dt_sheet_flowlog",flowLog);
		if(sheetInfo.getReportTitle().equals("RMJ") || sheetInfo.getReportTitle().equals("FEB")){
			Record flowLog2 = new Record();
			flowLog2.set("sheet_id", sheet.get("id")).set("opr_time", sdf.format(new Date())).set("opr_type", 3).set("result", "处理中").set("descr", "平台已受理");
			Db.update("update dt_sheet_flowlog set is_see=1 where is_see=0 and opr_type=1 and sheet_id=?",sheet.get("id"));
			Db.save("dt_sheet_flowlog",flowLog2);
		}
		
	
		stu = sheet.get("id").toString();
		return stu;
	}
	/**
	 * 查询工单的详情
	 * @param sheet_id
	 * @return
	 */
	public Record findSheetDetail(String sheet_id){
		
		//查询工单信息
		StringBuffer sql = new StringBuffer();
		sql.append("select s.*,t.code,t.title,t.short_title,t.merge_title,i.descr as idescr,i.pics,i.add_time,d.content,d.pics as dpics from dt_sheets s inner join ")
			.append(" dt_sheet_type t on s.type_code=t.code inner join dt_sheet_info i on s.id=i.sheet_id inner join dt_sheet_detail d on s.id=d.sheet_id and s.id="+sheet_id);
		//2.查询流程信息
		StringBuffer sql2 = new StringBuffer("select * from dt_sheet_flowlog where sheet_id="+sheet_id);
		
		Record sheet = Db.findFirst(sql.toString());
		
		List<Record> flow = Db.find(sql2.toString());
		
		//处理流程数据
		String descr = "",opr_time = "";
		for(int i=0;i<flow.size();i++){
			if(i != flow.size()-1){
				descr += flow.get(i).getStr("descr")+",";
				opr_time += new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(flow.get(i).get("opr_time"))+",";
			}else{
				descr += flow.get(i).getStr("descr");
				opr_time += new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(flow.get(i).get("opr_time"));
			}
		}
		sheet.set("flow", descr).set("flow_time", opr_time);
		
		return sheet;
	}
	
	/*
	 * 客服系统 -交易纠纷
	 * */
	/**
	 * 查询举报、建议、交易纠纷的类型
	 * @param sheetType
	 * @return
	 */
	public List<Record> findSheetType(String sheetType){
		
		List<Record> list = Db.find("select * from dt_sheet_type where short_title='"+sheetType+"' and layer!=1 and status =1");
		 
		return list;
	}
	/**
	 * 添加资料
	 * @param user_id
	 * @param sheet_id
	 * @param descr
	 * @param pics
	 * @return
	 */
	@SuppressWarnings("static-access")
	public SheetResult addData(String userId,String sheet_id,String descr,String pics){
		
		SheetResult result = new SheetResult();
		//校验参数
		if(userId   == null || userId.equals("")){
			result.setCode("403");
			result.setMessage("参数user_id不能为空！");
			
			return result;
		}
		if(sheet_id   == null || sheet_id.equals("")){
			result.setCode("403");
			result.setMessage("参数sheet_id不能为空！");
			
			return result; 
		}
		if(descr   == null || descr.equals("")){
			result.setCode("403");
			result.setMessage("参数descr不能为空！");
			
			return result;
		}
				
		log.info("==========调用addData接口开始，开始时间："+new DatesUtils().time()+"日志信息："+JFinalJson.getJson().toJson(result).toString()+"===============");
				
		
		//根据sheet_id 查询最初的资料信息
		Record info = Db.findFirst("select * from dt_sheet_info where sheet_id="+sheet_id);
		
		Record data = new Record().set("sheet_id", sheet_id).set("descr", descr).set("pics", pics)
									.set("add_time", new DatesUtils().time()).set("submitter", info.get("submitter"))
									.set("submitter_id", info.get("submitter_id")).set("submitter_type", info.get("submitter_type"));
		boolean flag = Db.save("dt_sheet_info", data);
		
		if(flag){
			result.setCode("200");
			result.setMessage(ResultEmuns.getMessageByCode("200"));
			result.setResult("SUCCESS");
		}else{
			result.setCode("500");
			result.setMessage(ResultEmuns.getMessageByCode("500"));
			result.setResult("ERROR");
		}
		
		return result;
	}
	
	
	/*
	 * 客服系统 -举报
	 * */
}
