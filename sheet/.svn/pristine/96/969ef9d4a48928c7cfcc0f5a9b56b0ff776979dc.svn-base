package com.manji.sheet.service;

import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
import com.manji.sheet.model.reqParam.EvaluateParam;
import com.manji.sheet.model.reqParam.InsertOrder;
import com.manji.sheet.model.reqParam.SheetInfoParam;
import com.manji.sheet.model.reqParam.WorkOrderParam;
import com.manji.sheet.utils.WorkerNumberUtil;

import net.sf.json.JSONObject;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2017/6/17.
 */
public class ManageService extends BaseSheetService {

    /**
     * 查询来源/
     * @return
     */
    public Map<String, Object> fromType(){
        List<Record> fromList=Db.find("select * from dt_sheet_source where layer=1 and status=1");
        List<Record> typeList=Db.find("select * from dt_sheet_type where layer=1 and status=1");
        Map<String, Object> map=new HashMap<String, Object>();
        map.put("fromList",fromList);
        map.put("typeList",typeList);
        return map;
    }
    
    /**
     * 查询工单状态
     * @param id
     * @return
     */
    public Record sheetStatus(int id){
        return Db.findFirst("select * from dt_sheets where id=?",id);
    }


    /**
     * 查询部门
     * @return
     */
    public List<Record> dept(){
        return Db.find("select * from dt_base_dept where status=1");
    }

    /**
     * 工单查询
     * @param pageNumber
     * @param pageSize
     * @param workOrder
     * @return
     */
    public Page<Record> Acceptance(int pageNumber, int pageSize, WorkOrderParam workOrder){
    	Page<Record> page=new Page<Record>();
    	if(workOrder.getStatus().equals("supermarket")){
        	 StringBuffer sql=new StringBuffer();
             sql.append("from dt_sheets ds left join dt_sheet_type dst on ds.type_code=dst.code and dst.status=1 left join dt_sheet_detail dsd on dsd.sheet_id=ds.id left join  dt_sheet_source dss on dss.code=ds.source_code and dss.status=1 left join dt_sheet_overtime dso on dso.priority_id=ds.priority_level where 1=1 and DATEADD(hour,dso.process_time, ds.start_time) < getdate()");
             sql=AcceptanceSQL(sql,workOrder);
             page=Db.paginate(pageNumber, pageSize, "select ds.id,ds.sheet_no,ds.start_time,dst.merge_title typeCode,isnull(ds.sponsor,'') sponsor,dss.merge_title sourceCode,ds.status,isnull(dsd.receiver,'') receiver,isnull(dsd.exe_dept,'') exe_dept,isnull(dsd.sup_dept,'') sup_dept",sql.toString());	
        }else{
        	 StringBuffer sql=new StringBuffer();
             sql.append("from dt_sheets ds left join dt_sheet_type dst on ds.type_code=dst.code and dst.status=1 left join dt_sheet_detail dsd on dsd.sheet_id=ds.id left join  dt_sheet_source dss on dss.code=ds.source_code and dss.status=1 where 1=1");
             sql=AcceptanceSQL(sql,workOrder);
             page=Db.paginate(pageNumber, pageSize, "select ds.id,ds.sheet_no,ds.start_time,dst.merge_title typeCode,isnull(ds.sponsor,'') sponsor,dss.merge_title sourceCode,ds.status,isnull(dsd.receiver,'') receiver,isnull(dsd.exe_dept,'') exe_dept,isnull(dsd.sup_dept,'') sup_dept",sql.toString());
        } 
        
        return page;
    }

    /**
     * 新增工单
     * @return
     */
    @Before(Tx.class)
    public void InsertWorkNumber(InsertOrder insertOrder){
    	SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf1=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String stu="";
		/*工单主表*/
			Record sheet = new Record();
			String short_title= WorkerNumberUtil.getcodeTitle(insertOrder.getChildType()).get("short_title").toString();
			sheet.set("sheet_no", WorkerNumberUtil.GeneratWorkerNumber(short_title));
			sheet.set("status",1);
			sheet.set("type_code",insertOrder.getChildType());
			sheet.set("sponsor_id",0);
			sheet.set("sponsor",insertOrder.getUsername());
			sheet.set("sponsor_type",Integer.parseInt(insertOrder.getNameType()));
			sheet.set("sponsor_contact",insertOrder.getUsermobile());
			sheet.set("start_time",sdf.format(new Date()));
			sheet.set("source_code","05");
			sheet.set("priority_level",Integer.parseInt(insertOrder.getPriorityLevel()));
			sheet.set("is_push",0);
			Db.save("dt_sheets",sheet);

		/*保存工单资料表*/
			Record sheetData = new Record();
			sheetData.set("sheet_id",sheet.get("id"));
			sheetData.set("descr",insertOrder.getUserexplain());
			sheetData.set("pics",insertOrder.getPath());
			sheetData.set("add_time",sdf1.format(new Date()));
			sheetData.set("submitter",insertOrder.getUsername());
			Db.save("dt_sheet_info",sheetData);

		/*工单业务关系表*/
			Record sheetRelation = new Record();
			sheetRelation.set("sheet_id",sheet.get("id"));
			sheetRelation.set("order_id",0);
			sheetRelation.set("back_order_id",0);
			sheetRelation.set("shop_user_id",0);
			sheetRelation.set("shop_id",0);
			sheetRelation.set("article_id",0);
			Db.save("dt_sheet_business",sheetRelation);
		/*工单流程记录*/
			String descr = "";
			String[] code = insertOrder.getChildType().split("_");
			if(code[0].equals("01") || code[0].equals("02") || code[0].equals("03")){
				descr = "客户提交举报单";
			}else if(code[0].equals("04")){
				descr = "客户提交咨询单";
			}else if(code[0].equals("05")){
				descr = "客户提交建议单";
			}else if(code[0].equals("06")){
				descr = "客户提交纠纷单";
			}
			Record flowLog = new Record();
			flowLog.set("sheet_id", sheet.get("id")).set("opr_time", sdf2.format(new Date())).set("opr_type", 1).set("result", "待受理").set("descr", descr).set("pics", insertOrder.getPath());
			Db.save("dt_sheet_flowlog",flowLog);
    }

    /**
     * 工单交易纠纷
     * @param id
     * @return
     */
    public Map<String, Object> SelectWorkNumber(int id){
        //工单信息
        Record WorkNumber=Db.findFirst("select ds.id,ds.type_code,ds.sheet_no,do.order_amount,do.express_fee,dsb.article_id,dsb.order_id,ds.status,dsd.exe_dept,dsd.sup_dept,do.order_no,ds.start_time,dst.merge_title typeTitle,durs.name,dss.merge_title fromTitle,ds.sponsor_type,ds.sponsor,ds.sponsor_contact,ds.priority_level from dt_sheets ds left join dt_sheet_type dst on ds.type_code=dst.code and dst.status=1 left join dt_sheet_detail dsd on dsd.sheet_id=ds.id left join  dt_sheet_source dss on dss.code=ds.source_code and dss.status=1 left join dt_sheet_business dsb on dsb.sheet_id=ds.id left join dt_orders do on do.id=dsb.order_id and do.is_del=0 left join dt_user_role_shopinfo durs on dsb.shop_user_id=durs.user_id and  durs.user_id<>0 and durs.is_del=0 and durs.dpkg=1 where 1=1 and ds.id=?",id);
        WorkNumber.set("aClassType", WorkerNumberUtil.getcode(WorkNumber.get("type_code").toString()).get("merge_title"));
        String code=WorkerNumberUtil.getcode(WorkNumber.get("type_code").toString()).get("code");
        if(code.equals("03") || code.equals("04") || code.equals("05") || code.equals("07")){
            WorkNumber.set("aClasscode","false");
        }else{
        	WorkNumber.set("aClasscode","true");
        }
        
        WorkNumber.set("OneCode",code);
        
        switch(WorkNumber.get("priority_level").toString()){
            case "1":
                WorkNumber.set("priority_level","一般");
                break;
            case "2":
                WorkNumber.set("priority_level","急");
                break;

            case "3":
                WorkNumber.set("priority_level","加急");
                break;

            default :
                break;
        }
        
        Record WorkInfoGoods=null;
        if(!WorkNumber.get("article_id").equals("") && !WorkNumber.get("article_id").equals("0")){
        	WorkInfoGoods=Db.findFirst("select * from dt_order_goods where id=?",WorkNumber.get("article_id"));
        }
        
        List<Record> WorkInfo=Db.find("select * from dt_sheet_info where sheet_id=? order by add_time asc",id);
        
        Map<String, Object> map=new HashMap<String, Object>();
        map.put("WorkInfoGoods",WorkInfoGoods);
        map.put("WorkNumber",WorkNumber);
        map.put("WorkInfo",WorkInfo);
        return map;
    }

    /**
     * 订单详情
     * @param WorkNumber
     * @return
     */
    public Map<String, Object> SelectOrderInfo(Record WorkNumber){
        //买家详细信息
        Record BuyersInfo=Db.findFirst("select do.status,do.order_no,do.add_time,dup.person_name,du.mobile dumobile,dogone.accept_name,dogone.mobile dogonemobile,dogone.post_code,dogone.address,do.invoice_title,isnull(do.message,'') message from dt_orders do left join dt_order_goodinfo dog on do.id=dog.order_id left join dt_users du on du.id=do.user_id left join dt_user_personinfo dup on dup.user_id=du.id left join dt_order_goodinfo dogone on dogone.order_id=do.id  where do.is_del=0 and do.id=?",WorkNumber.get("order_id"));
        List<Record> BuyersList=Db.find("select dog.id,dog.img_url,dog.goods_title,dog.spec_text,dog.real_price,dog.quantity,(dog.real_price*dog.quantity) allmoney from dt_order_goods dog where dog.order_id=?",WorkNumber.get("order_id"));

        //优惠
        Double money=0.0;
        for(Record x : BuyersList){
            Double moneyChild=Integer.valueOf(x.get("quantity").toString())*Double.valueOf(x.get("real_price").toString());
            money+=moneyChild;
        }
        Record rc=new Record();
        rc.set("money",money);
        rc.set("order_amount",WorkNumber.get("order_amount"));
        rc.set("express_fee",WorkNumber.get("express_fee"));
        rc.set("discount",0.0);

        //发货地址
        Record ShipAddress=Db.findFirst("select dse.* from dt_orders do left join dt_shop_expensesInfo dse on dse.shop_id=do.shop_user_id and dse.type=0 where do.id=?",WorkNumber.get("order_id"));
        //物流信息
        Record logistics=Db.findFirst("select isnull(dog.express_no,'') express_no,isnull(de.title,'') title,isnull(dog.express_time,'') express_time from dt_order_goodinfo dog left join  dt_express de on de.id=dog.express_id where dog.order_id=?",WorkNumber.get("order_id"));


        Map<String, Object> map=new HashMap<String, Object>();
        map.put("rc",rc);
        map.put("BuyersList",BuyersList);
        map.put("logistics",logistics);
        map.put("ShipAddress",ShipAddress);
        map.put("BuyersInfo",BuyersInfo);
        return map;
    }

    /**
     *退款详情
     * @param WorkNumber
     * @return
     */
    public Map<String, Object> SelectRefund(Record WorkNumber){
        List<Record> RefundList=Db.find("select dob.id,dob.back_return_no,dob.real_back_amount,dob.back_goods,dob.back_category,dob.back_resource from dt_order_backinfo dob where dob.order_id=?",WorkNumber.get("order_id"));
        for(Record x:RefundList){
            Record logistics=Db.findFirst("select isnull(de.title,'') title from dt_express_info dei left join dt_express de on dei.express_id=de.id where express_no=?",x.get("back_return_no"));
            if(logistics!=null){
                x.set("back_title",logistics.get("title"));
            }else{
                x.set("back_title","");
            }
            switch(x.get("back_goods").toString()){
                case "0":
                    x.set("back_goods","仅退款");
                    break;
                case "1":
                    x.set("back_goods","退货退款");
                    break;
                default :
                    break;
            }
        }
        Map<String, Object> map=new HashMap<String, Object>();
        map.put("RefundList",RefundList);
        return map;
    }

    /**
     *退款商品详情
     * @param id
     * @return
     */
    public List<Record> SelectRefundShop(int id){
        List<Record> RefundShopList=Db.find("select dog.img_url,dog.goods_title,dog.spec_text,dog.real_price,dog.quantity,(dog.real_price*dog.quantity) allmoney from dt_order_goods dog where back_order_id=?",id);
        return  RefundShopList;
    }

    /**
     * 工单查询sql拼装
     * @param sql
     * @param workOrder
     * @return
     */
    public StringBuffer AcceptanceSQL(StringBuffer sql,WorkOrderParam workOrder){
        if(!workOrder.getStatus().equals("") && workOrder.getStatus()!=null){
            if(workOrder.getStatus().equals("history")){
                sql.append(" and ds.status in (2,3,4,5,6)");
            }else if(workOrder.getStatus().equals("already")){
                sql.append(" and ds.status in (3)");
            }else if(workOrder.getStatus().equals("acceptance")){
                sql.append(" and ds.status = 1");
            }else if(workOrder.getStatus().equals("push")){
            	sql.append(" and ds.status in (4)");
            }
        }
        if(!workOrder.getSourceCode().equals("") && workOrder.getSourceCode()!=null){
            sql.append(" and ds.source_code like '"+workOrder.getSourceCode()+"_%'");
        }
        if(!workOrder.getTypeCode().equals("") && workOrder.getTypeCode()!=null){
            sql.append(" and ds.type_code like '"+workOrder.getTypeCode()+"_%'");
        }
        if(!workOrder.getSearch().equals("") && workOrder.getSearch()!=null){
            sql.append(" and (ds.sheet_no = '"+workOrder.getSearch()+"' or ds.sponsor='"+workOrder.getSearch()+"')");
        }
        if(!workOrder.getStartTime().equals("") && !workOrder.getEndTime().equals("")){
            sql.append(" and ds.start_time BETWEEN '"+workOrder.getStartTime()+"' and '"+workOrder.getEndTime()+"'");
        }else if(!workOrder.getStartTime().equals("") && workOrder.getEndTime().equals("")){
            sql.append(" and ds.start_time > '"+workOrder.getStartTime()+"'");
        }else if(workOrder.getStartTime().equals("") && !workOrder.getEndTime().equals("")){
            sql.append(" and ds.start_time < '"+workOrder.getEndTime()+"'");
        }
        return sql;
    }

    public Integer detilOrderCount(int id){
        Integer detilOrderCount=Db.find("select * from dt_order_backinfo where order_id=?",id).size();
        return detilOrderCount;
    }
    
    @Before(Tx.class)
    public String IsAccept(int tance,int implement,int supervision,int sheetId,String explain,JSONObject user){
    	String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    	String stu="";
    	switch (tance) {
		case 0:
			/*工单详情表*/
			Record sheetDetail = new Record().set("sheet_id",sheetId).set("receiver",user.get("username").toString()).set("exe_dept",WorkerNumberUtil.selectDepartment(implement)).set("exe_dept_id",implement).set("sup_dept",WorkerNumberUtil.selectDepartment(supervision)).set("sup_dept_id",supervision).set("content","").set("pics","");
			Db.save("dt_sheet_detail", sheetDetail);
			/*工单流程日志表*/
			Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheetId).set("opr_dept_id", user.get("dept_id")
        			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
        			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 3).set("result", "处理中")
        			.set("descr","").set("pics", ""));
			Db.update("update dt_sheets set status=3 where id=?",sheetId);
			stu="SUCCESS";
			break;
		case 1:
			/*工单详情表*/
			Record sheetDetai = new Record().set("sheet_id",sheetId).set("receiver",user.get("username").toString()).set("exe_dept","").set("exe_dept_id",0).set("sup_dept","").set("sup_dept_id",0).set("content",explain).set("pics","");
			Db.save("dt_sheet_detail", sheetDetai);
			/*工单流程日志表*/
			Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheetId).set("opr_dept_id", user.get("dept_id")
        			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
        			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 2).set("result", "不受理")
        			.set("descr", explain).set("pics", ""));
			Db.update("update dt_sheets set status=2 where id=?",sheetId);
			stu="SUCCESS";
			break;
		}
    	return stu;
    }

    /**
     * 流程日志信息
     * @param status
     * @return
     */
    public Record processLog(String status,int id){
    	Record record=new Record();
    	record=Db.findFirst("select * from dt_sheet_detail  where sheet_id=?",id);
    	return record;
    }
    
    public List<Record> selectHandle(int id){
    	return Db.find("select convert(varchar,type) type,value from dt_sheet_punish where sheet_id=?",id);
    }
    
    /**
     * 
     * @param id
     * @return
     */
    public Map<String, Object> technologicalProcess(int id){
    	List<Record> recordList=Db.find("select * from dt_sheet_flowlog where sheet_id=?",id);
    	Record timeRecord=new Record();
    	timeRecord.set("acceptance","");
    	timeRecord.set("already","");
    	timeRecord.set("processed","");
    	timeRecord.set("completed","");
    	timeRecord.set("entertained","");
    	for(Record x : recordList){
    		if(Integer.parseInt(x.get("opr_type").toString())==1){
    			timeRecord.set("acceptance",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==2){
    			timeRecord.set("entertained",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==3){
    			timeRecord.set("already",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==4){
    			timeRecord.set("processed",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==5){
    			timeRecord.set("processed",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==6){
    			timeRecord.set("completed",x.get("opr_time"));
    		}
    		if(Integer.parseInt(x.get("opr_type").toString())==7){
    			timeRecord.set("solve",x.get("opr_time"));
    		}
    	}
    	
    	Record flowlog=Db.findFirst("select * from dt_sheet_detail where sheet_id=?",id);
    	Map<String, Object> map=new HashMap<String, Object>();
        map.put("timeRecord",timeRecord);
        map.put("flowlog",flowlog);
        return map;
    }
    
    /**
     * 处罚(1)
     * @param path
     * @param reputation
     * @param bond
     * @param compensate
     * @param closedShop
     * @param frozen
     * @param shopId
     * @param explain
     * @param user
     * @param sheetId
     */
    @Before(Tx.class)
    public void handle(String path,String reputation,String bond,String compensate,String closedShop,String frozen,String shopId,String explain,JSONObject user,int sheetId){
    	
    	if(!path.equals("")){
    		path = path.substring(0,path.length()-1);
    	}
    	if(!reputation.equals("false")){
    		storagePunish(sheetId,1,reputation);
    	}
    	if(!bond.equals("false")){
    		storagePunish(sheetId,2,bond);
    	}
    	if(!compensate.equals("false")){
    		storagePunish(sheetId,3,compensate);
    	}
    	if(!closedShop.equals("false")){
    		storagePunish(sheetId,6,"");
    	}
    	if(!frozen.equals("false")){
    		storagePunish(sheetId,4,"");
    	}
    	if(!shopId.equals("false")){
    		shopId = shopId.substring(0,shopId.length()-1);
    		storagePunish(sheetId,5,shopId);
    	}
    	
    	String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    	/*工单详情表*/
    	Db.update("update dt_sheet_detail set receiver=?,content=?,pics=? where sheet_id=?",user.get("username").toString(),explain,path,sheetId);
		/*工单流程日志表*/
		Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheetId).set("opr_dept_id", user.get("dept_id")
    			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
    			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 4).set("result", "等待仲裁")
    			.set("descr", explain).set("pics", path));
		Db.update("update dt_sheets set status=4 where id=?",sheetId);
	
    }
    
    /**
     * 工单处罚(2)
     * @param path
     * @param explain
     * @param user
     * @param sheetId
     */
    @Before(Tx.class)
    public void handlealso(String path,String explain,JSONObject user,int sheetId){
    	
    	if(!path.equals("")){
    		path = path.substring(0,path.length()-1);
    	}
    	
    	String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    	/*工单详情表*/
    	Db.update("update dt_sheet_detail set receiver=?,content=?,pics=? where sheet_id=?",user.get("username").toString(),explain,path,sheetId);
		/*工单流程日志表*/
		Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheetId).set("opr_dept_id", user.get("dept_id")
    			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
    			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 5).set("result", "等待推送消息")
    			.set("descr", explain).set("pics", path));
		Db.update("update dt_sheets set status=4 where id=?",sheetId);
	
    }
    
    /**
     * dt_sheet_punish（工单处罚表） 
     */
    public void storagePunish(int sheetId,int type,String value){
    	Db.save("dt_sheet_punish", new Record().set("sheet_id", sheetId).set("type", type).set("value",value).set("status", 0).set("is_done",0));
    }
    
    /**
     * 仲裁
     * @param sheet_id
     */
    @Before(Tx.class)
    public String arbitration(int sheet_id,JSONObject user){
    	String stu="";
    	int row=Db.update("update dt_sheet_punish set status=1 where sheet_id=?",sheet_id);
    	if(row>0){
    		stu="success";
    		String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    		/*工单流程日志表*/
    		Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheet_id).set("opr_dept_id", user.get("dept_id")
        			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
        			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 5).set("result", "等待推送消息")
        			.set("descr", "").set("pics", ""));
    	}else{
    		stu="error";
    	}
    	return stu;
    }
    

    /**
     * 推送
     * @param sheet_id
     */
    @Before(Tx.class)
    public String Push(int sheet_id,JSONObject user){
    	String stu="";

		String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		/*工单流程日志表*/
		Db.save("dt_sheet_flowlog", new Record().set("sheet_id",sheet_id).set("opr_dept_id", user.get("dept_id")
    			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
    			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 6).set("result", "已完成")
    			.set("descr", "").set("pics", ""));
		Db.update("update dt_sheets set status=5 where id=?",sheet_id);
		stu="success";
    	return stu;
    }
    
    /**
     * 查询是否仲裁
     * @param sheet_id
     * @return
     */
    public String IsArbitration(int sheet_id){
    	String stu="";
    	Record record=Db.findFirst("select * from dt_sheet_flowlog where sheet_id=? and opr_type=5",sheet_id);
    	if(record!=null){
    		stu= "success";
    	}
    	return stu;
    }
    
    /************************************************************************************************************************************************************/
    /**
     * 查询工单流程
     * @param sheet_no
     * @return
     */
    public List<Record> findSheetFlow(String sheet_no){
    	return Db.find("select * from dt_sheet_flowlog where sheet_id=(select id from dt_sheets where sheet_no=?)",sheet_no);
    }
    
    /**
     * 查询工单信息
     * @param sheet_no
     * @return
     */
    public Record findSheets(String sheet_no){
    	
    	return Db.findFirst("select a.*,b.order_no,c.nick_name,c.mobile,d.name,d.mobile as smobile from dt_sheets a,dt_orders b,dt_users c,dt_user_role_shopinfo d,dt_sheet_business e where a.id=e.sheet_id and e.order_id=b.id and e.shop_user_id=d.user_id and c.id=("+
    						"select user_id from dt_orders a where id=(select order_id from dt_sheet_business where sheet_id=(select id from dt_sheets where sheet_no=?)))",sheet_no);
    	
    }
    /**
     * 查询工单资料
     * @param sheet_no
     * @return
     */
    public List<Record> findSheetInfo(String sheet_no){
    	
    	return Db.find("select * from dt_sheet_info where sheet_id=(select id from dt_sheets where sheet_no=?)",sheet_no);
    	
    }
   /**
    * 是否受理
    * @param
    * @param
    * @param
    * @return
    */
    @Before(Tx.class)
    public boolean isAcceptance(EvaluateParam evaluate,JSONObject user){
    		String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
    		boolean b = false;
    		String result = "不予理睬";
    		String descr = "不予理睬";
			String sheet_no = evaluate.getSheet_no();
        	int status = evaluate.getStatus();
        	String content = evaluate.getContent();
            if(sheet_no != null && content != null){
        		//1.修改工单主表的状态
            	int num = Db.update("update dt_sheets set status=? where sheet_no=?",status,sheet_no);
            	//2.新增工单详情表数据
            	Boolean flag = Db.save("dt_sheet_detail", new Record().set("content", content).set("sheet_id",findSheets(sheet_no).get("id")));
            	//3.记录工单流程日志表        从session中取登录人的相关信息，部门什么之类的
            	Db.save("dt_sheet_flowlog", new Record().set("sheet_id",findSheets(sheet_no).get("id")).set("opr_dept_id", user.get("dept_id")
            			.toString()).set("opr_dept", user.get("dept_name").toString()).set("opr_user_id", user.get("user_id").toString()).
            			set("opr_user",user.get("username").toString()).set("opr_time",date).set("opr_type", 1).set("result", result)
            			.set("descr", descr));
            	//4.如果是刚受理工单，则需要推送到执行部门和督察部门
            	if(evaluate.getType().equals("受理")){
            		//5.记录对应的执行部门和督察部门      受理人应该根据部门老查询出来的
            		b = addDetail(evaluate);
                			
            	}
            	if(num >0 && flag && b){
            		return true;
            	}else{
            		return false;
            	}
    		}else{
    			return false;
    		}
    		
    }
    /**
     * 添加工单详情
     * @param evaluate
     * @return
     */
    public boolean addDetail(EvaluateParam evaluate){
    	boolean flag = false;
    	if(evaluate != null){
    		flag = Db.save("dt_sheet_detail", new Record().set("sheet_id",findSheets(evaluate.getSheet_no()).get("id")).set("receiver", "刘英杰")
    				.set("exe_dept", evaluate.getExe_dept()).set("exe_dept_id", evaluate.getExe_dept_id()).
        			set("sup_dept",evaluate.getSup_dept()).set("sup_dept_id",evaluate.getSup_dept_id()).set("content", evaluate.getContent()).set("pics", evaluate.getPics()));
    	}
    	return flag;
    }
    /**
     * 根据工单号查询店铺评分信息
     * @param sheet_no
     * @return
     */
    public List<Record> findShopScore(String sheet_no){
    	
    	return Db.find("select order_id 订单号,review_score 整体评分,service_review_score 服务评分,pack_review_score 包装评分,distribution_review_score 物流评分 from dt_order_comment where order_id=(select order_id from dt_sheet_business where sheet_id=(select id from dt_sheets where sheet_no=?))",sheet_no);
    	
    }
    
    /**
     * 根据工单号查询商品评分信息
     * @param sheet_no
     * @return
     */
    public List<Record> findGoodsScore(String sheet_no){
    	
    	return Db.find("select a.article_id,a.goods_score,b.title,c.goods_describe from dt_order_goods a ,dt_article b,dt_article_info c where a.article_id=b.id and b.id=c.article_id and a.order_id=(select order_id from dt_sheet_business where sheet_id=(select id from dt_sheets where sheet_no=?))",sheet_no);
    	
    }
    
    /**
     * 根据工单号查询商品文字评论信息
     * @param sheet_no
     * @return
     */
    public List<Record> findGoodsTitle(String sheet_no){
    	
    	return Db.find("select a.article_id,a.content,b.title from dt_article_comment a,dt_article b where a.article_id=b.id and a.order_id=(select order_id from dt_sheet_business where sheet_id=(select id from dt_sheets where sheet_no=?))",sheet_no);
    	
    }
}
